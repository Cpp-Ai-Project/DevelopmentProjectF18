# -*- coding: utf-8 -*-
"""Project 3 - Classes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ALiUGQ9u1fGmY8WWUhEWVYlZ34ICHVKw
"""

# Group_6 
class Group_6():
  # Constructor
  def __init__(self, groupMembers):
    self.groupMembers = groupMembers
    
  # Function to see if all group members can meet up that day
  # Parameters: day, time
  def meet_up(self, day, time):
    conflict = False
    for member in self.groupMembers:
      for classes in member.classSchedule:
        for days in classes.meetingDays:
          if (days == day):
            # Check time
            if (classes.startTime <= time and classes.endTime >= time): # Can't meet up that day
              print (member.name, " can't meet up on ", day)
              conflict = True
    # Otherwise, all group members can meet up given day and time
    if (not conflict):
      print ("Sounds good! All members can meet up on", day, "at ", time)
  
  # Function to print all member information
  def print_members(self):
    for member in self.groupMembers:
      print ("Name: ", member.name)
      print ("Major: ", member.major)
      print ("Schedule: ")
      member.print_schedule()
      print ("\n")

# GroupMember
class GroupMember():
  # Constructor
  def __init__(self, name, major, classSchedule):
    self.name = name
    self.major = major
    self.classSchedule = classSchedule
  
  # Print class schedule for member
  def print_schedule(self):
    for classes in self.classSchedule:
      classes.print_class_info()

# Class
class Class():
  # Constructor
  def __init__(self, department, classNumber, startTime, endTime, meetingDays):
    self.department = department
    self.classNumber = classNumber
    self.startTime = startTime
    self.endTime = endTime
    self.meetingDays = meetingDays
  
  # Print information for class
  def print_class_info(self):
    print ("Class Information - ")
    print ("Department : ", self.department)
    print ("Class Number : ", self.classNumber)  
    print ("Start Time: ", self.startTime, "PM" if self.startTime >= 12.00 else "AM")               
    print ("End Time: ", self.endTime, "PM" if self.endTime >= 12.00 else "AM")
    print ("Meeting Days: ", self.meetingDays)

calculus = Class("Mathematics", 10, 10.0, 12.0, ["Monday", "Wednesday"])
algorithms = Class("Algorithms", 331, 15.0, 16.0, ["Tuesday", "Thursday"])
member1 = GroupMember("Wilson Thai", "Computer Science", [calculus, algorithms])

physics = Class("Physics", 133, 8.0, 10.0, ["Monday", "Wednesday"])
weighttraining = Class("Weight Training", 101, 11.0, 13.0, ["Tuesday", "Thursday"])
member2 = GroupMember("Kobe", "Computer Science", [physics, weighttraining])

bestGroup = Group_6([member1, member2])
bestGroup.print_members()
bestGroup.meet_up("Friday", 10.0)